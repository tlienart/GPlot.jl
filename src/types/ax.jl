@with_kw mutable struct Axis
    prefix     ::String                  # x, y, x2, y2, z AðŸš«
    ticks      ::Ticks                   # ticks of the axis AðŸš«
    tickslabels::TicksLabels             # labels of the ticks AðŸš«
    # ---
    title      ::Option{Title}     = âˆ… # title of the axis AðŸš«
    off        ::Option{Bool}      = âˆ… # if true, axis is not shown AðŸš«
    base       ::Option{Float}     = âˆ… # scale font and ticks AðŸš«
    textstyle  ::Option{TextStyle} = âˆ… # parent textstyle of axis AðŸš«
    lwidth     ::Option{Float}     = âˆ… # width of the axis spine AðŸš«
    grid       ::Option{Bool}      = âˆ… # ? draw âŸ‚ lines to that axis AðŸš«
    log        ::Option{Bool}      = âˆ… # log scale AðŸš«
    min        ::Option{Float}     = âˆ… # minimum span of the axis AðŸš«
    max        ::Option{Float}     = âˆ… # maximum span of the axis AðŸš«
end
Axis(p::String) = Axis(prefix=p, ticks=Ticks(p), tickslabels=TicksLabels(p))


abstract type Axes{B <: Backend} end


@with_kw mutable struct Axes2D{B} <: Axes{B}
    xaxis   ::Axis            = Axis("x")  # AðŸš«
    x2axis  ::Axis            = Axis("x2") # AðŸš«
    yaxis   ::Axis            = Axis("y")  # AðŸš«
    y2axis  ::Axis            = Axis("y2") # AðŸš«
    drawings::Vector{Drawing} = Vector{Drawing}() #
    # ---
    title   ::Option{Title}              = âˆ… # AðŸš«
    size    ::Option{Tuple{Float,Float}} = âˆ… # âœ“ (width cm, height cm)
    math    ::Option{Bool}               = âˆ… # âœ“ axis crossing (0, 0)
    legend  ::Option{Legend}             = âˆ…
end

mutable struct Axes3D{B} <: Axes{B} end # XXX not yet defined


"""
    erase!(axes)

Cleans up `axes`.
"""
function erase!(a::Axes2D)
    a.xaxis    = Axis("x")
    a.x2axis   = Axis("x2")
    a.yaxis    = Axis("y")
    a.y2axis   = Axis("y2")
    a.drawings = Vector{Drawing}()
    clear!(a)
    GP_CURAXES.x = a
    return
end
