@with_kw mutable struct Title
    text     ::String                # GLE âœ“
    prefix   ::Option{String}    = âˆ… # x, x2, y, y2, z GLE âœ“
    textstyle::Option{TextStyle} = âˆ… # GLE âœ“
    dist     ::Option{Float}     = âˆ… # distance labels - title GLE âœ“
end


@with_kw mutable struct TicksLabels
    prefix   ::String                     # AðŸš«
    off      ::Option{Bool}           = âˆ… # whether to suppress the labels AðŸš«
    textstyle::Option{TextStyle}      = âˆ… # textstyle AðŸš«
    angle    ::Option{Float}          = âˆ… # rotation of labels AðŸš«
    format   ::Option{String}         = âˆ… # format of the ticks labels AðŸš«
    shift    ::Option{Float}          = âˆ… # move labels to left/right AðŸš«
    dist     ::Option{Float}          = âˆ… # âŸ‚ distance to spine AðŸš«
    names    ::Option{Vector{String}} = âˆ… # replaces numeric labeling AðŸš«
end
TicksLabels(p) = TicksLabels(prefix=p)


@with_kw mutable struct Ticks
    prefix   ::String                # x, y, x2, y2, z AðŸš«
    off      ::Option{Bool}      = âˆ… # whether to suppress them AðŸš«
    linestyle::Option{LineStyle} = âˆ… # how the ticks look AðŸš«
    length   ::Option{Float}     = âˆ… # how long the ticks AðŸš«
    places   ::Option{VF}        = âˆ… # where the ticks are AðŸš«
    symticks ::Option{Bool}      = âˆ… # draws ticks on 2 sides of spine AðŸš«
end
Ticks(p) = Ticks(prefix=p)


@with_kw mutable struct Axis
    prefix     ::String                  # x, y, x2, y2, z AðŸš«
    ticks      ::Ticks                   # ticks of the axis AðŸš«
    tickslabels::TicksLabels             # labels of the ticks AðŸš«
    title      ::Option{Title}     = âˆ… # title of the axis AðŸš«
    off        ::Option{Bool}      = âˆ… # if true, axis is not shown AðŸš«
    base       ::Option{Float}     = âˆ… # scale font and ticks AðŸš«
    textstyle  ::Option{TextStyle} = âˆ… # parent textstyle of axis AðŸš«
    lwidth     ::Option{Float}     = âˆ… # width of the axis spine AðŸš«
    grid       ::Option{Bool}      = âˆ… # ? draw âŸ‚ lines to that axis AðŸš«
    log        ::Option{Bool}      = âˆ… # log scale AðŸš«
    min        ::Option{Float}     = âˆ… # minimum span of the axis AðŸš«
    max        ::Option{Float}     = âˆ… # maximum span of the axis AðŸš«
end
Axis(p) = Axis(prefix=p, ticks=Ticks(p), tickslabels=TicksLabels(p))


abstract type Axes end


@with_kw mutable struct Axes2D <: Axes
    xaxis   ::Axis                       = Axis("x")         # âœ“
    x2axis  ::Axis                       = Axis("x2")        # âœ“
    yaxis   ::Axis                       = Axis("y")         # âœ“
    y2axis  ::Axis                       = Axis("y2")        # âœ“
    drawings::Vector{Drawing}            = Vector{Drawing}() #
    title   ::Option{Title}              = âˆ…                 # âœ“
    size    ::Option{Tuple{Float,Float}} = âˆ…                 # âœ“
end


mutable struct Axes3D <: Axes end


@with_kw mutable struct Figure{B<:Backend}
    id::String                # unique identifier of the figure
    g::B
    axes::Vector{Axes} = Vector{Axes}() # all the subplots (â‰¥1)
    # options
    size     ::Tuple{Float,Float} = (8., 6.) # âœ“
    textstyle::TextStyle          = TextStyle(font="psh", hei=0.2) # âœ“
    texlabels::Option{Bool}       = âˆ… # true if has tex âœ“
    texscale ::Option{Float}      = âˆ… # scale latex to scale * hei (def=1) âœ“
end


function Figure(id, g)
    GP_CURFIG.x = id
    Î» = Figure(id=id, g=g)
    GP_ALLFIGS[id] = Î»
    return Î»
end
Figure() = Figure("fig_" * randstring(3))


function Figure(id::String)
    get(GP_ALLFIGS, id) do
        Figure(id, GP_BACKEND())
    end
end


erase!(fig::Figure) = (take!(fig.g); fig.axes=Vector{Axes}(); fig)
